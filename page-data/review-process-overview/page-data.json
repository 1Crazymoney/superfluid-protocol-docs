{"componentChunkName":"component---src-templates-article-js","path":"/review-process-overview","result":{"data":{"mdx":{"id":"397e4d27-91ef-5fcd-86d3-ef7ed1ce857f","excerpt":"Review Process Steps Video training content goes stale. egghead.io should be as up to date as possible when it comes to content. Because of the nature of video we need to monitor each lesson on multiple levels. This document will detail what you needâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Review Process Overview\",\n  \"slug\": \"review-process-overview\",\n  \"chapterTitle\": \"Review 101\",\n  \"guide\": \"reviewer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"review-process-steps\"\n  }, \"Review Process Steps\"), mdx(\"p\", null, \"Video training content goes stale. egghead.io should be as up to date as possible when it comes to content. Because of the nature of video we need to monitor each lesson on multiple levels.\"), mdx(\"p\", null, \"This document will detail what you need to know to get started with a review as well as context for what to do to when you find stale content.\"), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"lesson-video\"\n  }, \"Lesson Video\"), mdx(\"p\", null, \"An excellent coding screencast will focus on core concepts and have the ability to remain \\u201Cevergreen\\u201D through minor revisions of the library that it is demonstrating. We need to continue to monitor this to make sure that it is the case.\"), mdx(\"p\", null, \"When differences exist we can take several courses of action:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update the code sample and use comments in the code to notify the user that it has changed from the video\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Annotate the lesson\\u2019s page to tell the student what is wrong with the lesson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace the lesson video/code with an updated version\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mark the lesson as obsolete/deprecated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Record a new version (vs replacement)\")), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"update-lesson-code-sample\"\n  }, \"Update Lesson Code Sample\"), mdx(\"p\", null, \"This is the most common action taken by the reviewer. The lesson code sample should reflect the current version(s) for the libraries it is demonstrating (libraries are updated often!). The sample code can correct for minor differences in the code demonstrated in the lesson video, noting with comments when this has been done.\"), mdx(\"p\", null, \"As most of the actions you will take relate to code, the following steps detail the processes that egghead reviewers (you!) take to handle discrepencies with dependency versions and subsequent breaking changes within code.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"../../../images/screenshots/review-05-review-process-gitflow.png\",\n    \"alt\": \"Branch flow going from work to Pull Request to merged\"\n  }))), mdx(\"h1\", {\n    \"id\": \"glossary\"\n  }, \"Glossary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Repo\"), \" - source code on Github called a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"repository\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Issue\"), \" - conversation in a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"repo\"), \" before proposing changes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"PR\"), \" - special \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"issue\"), \" attached to proposed changes called a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"pull request\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code review\"), \" - \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"PR\"), \" approval process with conversations attached to specific lines of code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Project board\"), \" - the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"eggheadio-projects\"), \" GitHub organization's \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/orgs/eggheadio-projects/projects/1\"\n  }), \"project board\"), \".\")), mdx(\"h1\", {\n    \"id\": \"steps\"\n  }, \"Steps\"), mdx(\"h2\", {\n    \"id\": \"anyone-eg-end-users-or-greenkeeper\"\n  }, \"Anyone (e.g. end users or Greenkeeper)\"), mdx(\"p\", null, \"We want everyone to report issues, not just admin! Issues are reported from users in serveral different channels which include: Twitter, HelpScout (our customer support software), Slack (flagged in #egghead-support and #content-team), and eggheadio lesson comments.\"), mdx(\"p\", null, \"This can be tough to all keep track of. If you notice a user having an issue with a code behavior, open an issue in the repo and link it in #content-team.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"issue\"), \" in a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"repo\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Review Team Projects\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"project board\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"GitHub automatically adds the issue to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"To do\"), \" column on the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"project board\"), \".\")), mdx(\"h2\", {\n    \"id\": \"reviewer\"\n  }, \"Reviewer\"), mdx(\"p\", null, \"All courses that need review will be added to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Review Team Projects\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"project board\"), \" in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"To do\"), \" column. The following steps detail what you need to do to claim and finish a review:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pick an issue from the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"To do\"), \" column on the project board.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Manually move the issue to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"In progress\"), \" column on the project board.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Assign yourself to the issue.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fork the repo.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit updated dependencies and lock file.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit changes to resolve the issue.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit updated changelog.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Close the issue in a commit message.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"PR\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://help.github.com/en/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork\"\n  }), \"allow changes to your PR\\u2019s branch\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"GitHub automatically adds the PR (not the issue) to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code review\"), \" column on the project board.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit changes requested in the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"code review\"), \".\")), mdx(\"h2\", {\n    \"id\": \"continuous-integration-todo-milestone-1\"\n  }, \"Continuous Integration \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"TODO: Milestone 1\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lint changelog.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check install for errors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check build for errors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check tests for errors.\")), mdx(\"h2\", {\n    \"id\": \"admin\"\n  }, \"Admin\"), mdx(\"p\", null, \"These actions are taken by Review Team leads when you are finished with a review. When you PR code, this is where the team will discuss questions and issues that are surfaced through your review that need more conversation.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Request changes in the code review.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.atlassian.com/git/tutorials/using-branches/git-checkout\"\n  }), \"Check out\"), \" the PR in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://vscode.rocks/github-pr-extension/\"\n  }), \"official VS Code extension\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Commit updated lock file \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://help.github.com/en/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork\"\n  }), \"to the PR\\u2019s branch\"), \" if it was updated in CodeSandbox.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Approve the PR.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Merge the PR.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"GitHub automatically moves the PR to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Resolved\"), \" column on the project board.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"GitHub automatically closes the issue and moves it to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Done\"), \" column on the project board.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Manually move the PR to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Done\"), \" column on the project board when deployed.\")), mdx(\"h2\", {\n    \"id\": \"web-service-todo-milestone-2\"\n  }, \"Web Service \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"TODO: Milestone 2\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Receive \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[pull_request](https://developer.github.com/v3/activity/events/types/#pullrequestevent)\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.github.com/v3/activity/events/types/#pullrequestevent\"\n  }), \"event\"), \" from GitHub webhook.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Process changelog.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update database.\")), mdx(\"h1\", {\n    \"id\": \"updating-dependencies\"\n  }, \"Updating Dependencies\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn latest\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Return\"), \" in the workspace root. Currently, it aliases \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn upgrade-interactive --latest && yarn upgrade -L\"), \".\"), mdx(\"h1\", {\n    \"id\": \"changelog-format\"\n  }, \"Changelog Format\"), mdx(\"p\", null, \"egghead uses the Changelog to document reviews in a consistent, machine-parseable format that details the version changes between reviews. When discrepencies between versions happen (they will), what is added, removed, changed, deprecated,and fixed is logged to provide information about the current state of the project.\"), mdx(\"p\", null, \"Install the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=dzgmelody.vscode-changelog-snippets\"\n  }), \"VS Code extension\"), \".\"), mdx(\"p\", null, \"This template should be added to a repository if one does not already exist:\"), mdx(\"h2\", {\n    \"id\": \"template\"\n  }, \"Template\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"# Changelog\\n\\nAll notable changes to this project will be documented in this file.\\n\\nThe format is based on \\\\[Keep a Changelog\\\\](https://keepachangelog.com/en/1.0.0/),\\nand this project adheres to \\\\[Semantic Versioning\\\\](https://semver.org/spec/v2.0.0.html).\\n\\n## [Unreleased]\\n\\n### Added\\n\\n### Changed\\n\\n### Deprecated\\n\\n### Removed\\n\\n### Fixed\\n\\n### Security\\n\\n## 1.0.0 - YYYY-MM-DD\\n\\n### Added\\n\\n- This file.\"))), mdx(\"h1\", {\n    \"id\": \"other-actions\"\n  }, \"Other Actions\"), mdx(\"p\", null, \"When simply updating the code is not enough, there are a few more options available to us to inform users of breaking changes that might have occured.\"), mdx(\"p\", null, \"These are some common actions that are suggested by a reviewer during the Pull Request process for larger issues that need more attention.\"), mdx(\"h2\", {\n    \"id\": \"annotate-the-lesson-page\"\n  }, \"Annotate the lesson page\"), mdx(\"p\", null, \"When there is some significant breaking difference in the lesson video and code sample, we can create a notification to be displayed prominently on the lesson page. This notification comes in the form of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errata\"), \" which is shown below:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"../../../images/illustrations/reviewers/01-Review/00-errata-example.png\",\n    \"alt\": \"Errata Example\"\n  }))), mdx(\"h2\", {\n    \"id\": \"replace-the-lesson-videocode\"\n  }, \"Replace the lesson video/code\"), mdx(\"p\", null, \"If the lesson still has significant value conceptually, we can re-record the lesson and produce an updated code sample. We want to do this for popular lessons and maintain our SEO.\"), mdx(\"p\", null, \"Make a note of why you think the lesson needs to be re-recorded in the Changelog.\"), mdx(\"h2\", {\n    \"id\": \"mark-as-obsolete\"\n  }, \"Mark as obsolete\"), mdx(\"p\", null, \"Like Annotation above, but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"more deadly\"), \"! :skull:\"), mdx(\"h2\", {\n    \"id\": \"record-a-new-lesson\"\n  }, \"Record a new lesson\"), mdx(\"p\", null, \"Sometimes we will want to record a new lesson that presents the underlying concept with the updated version instead of replacing it in-place.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":4,"tableOfContents":{"items":[{"url":"#review-process-steps","title":"Review Process Steps","items":[{"url":"#lesson-video","title":"Lesson Video"},{"url":"#update-lesson-code-sample","title":"Update Lesson Code Sample"}]},{"url":"#glossary","title":"Glossary"},{"url":"#steps","title":"Steps","items":[{"url":"#anyone-eg-end-users-or-greenkeeper","title":"Anyone (e.g. end users or Greenkeeper)"},{"url":"#reviewer","title":"Reviewer"},{"url":"#continuous-integration-todo-milestone-1","title":"Continuous Integration TODO: Milestone 1"},{"url":"#admin","title":"Admin"},{"url":"#web-service-todo-milestone-2","title":"Web Service TODO: Milestone 2"}]},{"url":"#updating-dependencies","title":"Updating Dependencies"},{"url":"#changelog-format","title":"Changelog Format","items":[{"url":"#template","title":"Template"}]},{"url":"#other-actions","title":"Other Actions","items":[{"url":"#annotate-the-lesson-page","title":"Annotate the lesson page"},{"url":"#replace-the-lesson-videocode","title":"Replace the lesson video/code"},{"url":"#mark-as-obsolete","title":"Mark as obsolete"},{"url":"#record-a-new-lesson","title":"Record a new lesson"}]}]},"fields":{"slug":"/reviewer/review/00-review-process/","guide":null,"github":"undefined/src/content/reviewer/review/00-review-process.mdx"},"frontmatter":{"title":"Review Process Overview","shareImage":null,"categories":null,"showToc":null}}},"pageContext":{"id":"397e4d27-91ef-5fcd-86d3-ef7ed1ce857f"}},"staticQueryHashes":["1655584978","2867478693"]}